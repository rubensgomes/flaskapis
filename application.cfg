# flaskapis application configuration settings
# Copyright (c) 2015 Rubens S. Gomes
# All Rights Reserved.

# --->>> FLASK Settings <<<---------------------------------------------------
DEBUG = False
TESTING = False
JSON_SORT_KEYS = False
MAX_CONTENT_LENGTH = 1024


# --->>> MISC Settings <<<---
# Working folder: database file is placed in this folder.
WORKING_DIR = "/home/wsgi/flaskapis"


# --->>> Logging Settings <<<-------------------------------------------------
# Log file where application logs are saved.
LOG_FILE = "/home/wsgi/flaskapis/flaskapis.log"

# Max number of bytes saved in the application log file before it rotates
LOG_FILE_MAX_BYTES = 1000000

# Number of backup files created for application log files rotation
LOG_BACKUP_COUNT = 5

# Application log level: CRITICAL, ERROR, WARNING, INFO, DEBUG
LOG_LEVEL = "DEBUG"


# --->>> Email Settings <<<---------------------------------------------------
# Settings used to send email from a GMail account
# ATTENTION:  The Google account below must have the following security
# settings in https://security.google.com/settings.
# - Disable access for less secure apps :
# - Access for less secure apps: Turn On
# If having authentication issues you may have to review the Devices &
# activity at the https://security.google.com/settings/security/activity
GMAIL_ACCOUNT = "***"
GMAIL_PASSWORD = "***"

# recipient email to receive notifications
RECIPIENT_EMAIL = "***"


# --->>> SQLITE Settings <<<--------------------------------------------------
# SQLITE_DB_ENABLE should be enabled for the sensor IoT applications
SQLITE_DB_ENABLE = True

# Path to the SQLite Database used by Sensor IoT applications
SQLITE_DB = "/home/wsgi/flaskapis/flaskapis.db"


# --->>> RESTFul Settings <<<-------------------------------------------------
# List of RESTFul API services to be enabled
# Notice that SENSOR_TEMPERATURE reads may only be available when
#   querying the the IoT GW - (e.g., Raspberry Pi)
#  TEMPERATURE:  REST API to convert temperature units
#  WEIGHT: REST API to convert weight units
#  LENGTH: REST API to convert length units
#  PRODUCT_INFO: REST API to retrieve information about this software
#  SENSOR_INFO: REST API to retrieve sensor general information
#  SENSOR_TEMPERATURE: REST API to retrieve sensor temperature reading
#  SENSOR_TEMPERATURE_ANALYTICS: REST API to retrieve past sensor readings
#  URL: REST API to search text in a given url
RESTFUL_APIS = "TEMPERATURE, WEIGHT, LENGTH, PRODUCT_INFO, SENSOR_INFO, \
SENSOR_TEMPERATURE_ANALYTICS, URL"

# Sensor RESTFul API HTTP Basic Authentication username/password
SENSOR_REST_API_USERNAME = "***"
SENSOR_REST_API_PASSWORD = "***"

# REST URL to read the temperature sensor
SENSOR_TEMPERATURE_URL = "***"


# --->>> SENSOR Settings <<<--------------------------------------------------
# Serial for the DS18B20 temperature sensor installed at Rubens home
SENSOR_TEMPERATURE_SERIAL = "***"

# Following properties is only used when running sensor server on Linux
SENSOR_PID_FILE = "/home/wsgi/sensorserver/sensorserver.pid"

# Sensor request timeout in seconds.  Amount of time to wait for a sensor
# response before raising an exception.  This property is used by sensorserver.
SENSOR_REQUEST_TIMEOUT = 60

# Sensor sleep timeout.  This is the time in seconds the sensorserver daemon
# waits (sleeps) before it re-sends a new request to the sensor REST API.
SENSOR_SLEEP_TIME = 900   # 15 minutes = 900


# --->>> MQTT Settings <<<----------------------------------------------------
MQTT_HOST = "***"
MQTT_PORT = 1883
MQTT_CLIENT_ID = "Raspberry_Pi"
MQTT_USERNAME = "***"
MQTT_PASSWORD = "***"
